@page "/produits"
@inject IToastService toastService
@inject SweetAlertService Swal
@inject IProduitService produitService

@attribute [Authorize(Roles = "administrateur")]


<div class="row justify-content-center  mt-3">
    <div class="col-sm-6 col-md-4 col-xl-3 mb-4">
        <div class="d-grid gap-1 col-12 mx-auto">
            <a class="btn btn-primary" href="/produit">Creer Nouveau</a>
        </div>
    </div>
    <div class="col-sm-6 col-md-8 col-xl-9 mb-4">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Rechercher produit..." @bind-value="recherche">
            <button class="btn btn-outline-secondary" type="button" @onclick="(async()=> await GetProducts(recherche))">
                <i class="oi oi-magnifying-glass"></i>
            </button>
        </div>
    </div>
</div>

<div class="row gx-4 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 justify-content-start mt-2">

    @if (list != null)
    {
        foreach (var item in list)
        {
            <div class="col mb-5">
                <div class="card h-100">
                    <!-- Sale badge-->

                    @if (DateTime.Now < item.DateCreation.Value.AddDays(30))
                    {
                        <div class="badge bg-primary text-white position-absolute" style="top: 0.5rem; right: 0.5rem">Nouveau</div>
                    }

                    <!-- Product image-->
                    <img class="card-img-top border-dark border-1" src="@item.Image">
                    <!-- Product details-->
                    <div class="card-body p-4">
                        <div class="text-center">
                            <!-- Product name-->
                            <h5 class="fw-bolder">@item.Nom</h5>
                            <!-- Product price-->

                            @if (item.PrixOffre > 0 && item.PrixOffre < item.Prix)
                            {
                                <span class="text-danger text-decoration-line-through"> @item.Prix Fcfa</span>
                                <span>@item.PrixOffre Fcfa</span>
                            }
                            else
                            {
                                <span>@item.Prix Fcfa</span>
                            }
                        </div>
                    </div>
                    <!-- Product actions-->
                    <div class="card-footer bg-transparent">
                        <div class="row justify-content-between">
                            <a class="col-5 btn btn-sm btn-outline-primary mt-auto" href="/produit/@item.IdProduct"><i class="oi oi-pencil fs-5"></i></a>
                            <button class="col-5 btn btn-sm btn-outline-danger mt-auto" @onclick="(async () => await Supprimer(item))">
                                <i class="oi oi-trash fs-5"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }


</div>



@code {

    private List<ProduitDTO>? list = null;
    private string recherche = "";


    private async Task GetProducts(string valeur = "")
    {
        var response = await produitService.List(valeur);
        if (response.EsCorrect)
        {
            list = (List<ProduitDTO>)response.Resultat!;
        }
        else
        {
            list = new List<ProduitDTO>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    private async Task Supprimer(ProduitDTO model)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Est vous vraiment sur de vouloir supprimer?",
                Text = $"Effacer: {model.Nom}?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Oui Effacer",
                CancelButtonText = "Non Ne pas supprimer"
            });

        if (result.IsConfirmed)
        {
            var response = await produitService.Delete(model.IdProduct);
            if (response.EsCorrect)
            {
                await GetProducts();
                toastService.ShowSuccess("Product effacer");
            }
            else
            {
                toastService.ShowSuccess(response.Message);
            }

        }
    }
}
