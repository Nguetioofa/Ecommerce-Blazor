@page "/utilisateurs"

@inject IUtilisateurService utilisateurService
@inject IToastService toastService
@inject SweetAlertService swal

<div class="row justify-content-center  mt-3">
    <div class="col-sm-6 col-md-4 col-xl-3 mb-4">
        <div class="d-grid gap-1 col-12 mx-auto">
            <a class="btn btn-primary" href="/utilisateur">Creer Nouveau</a>
        </div>
    </div>
    <div class="col-sm-6 col-md-8 col-xl-9 mb-4">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Rechecher utilisateur..." @bind-value="recherche">
            <button class="btn btn-outline-secondary" type="button" @onclick="(async () => await GetUtilisateur(recherche))">
                <i class="oi oi-magnifying-glass"></i>
            </button>
        </div>
    </div>
</div>

<div class="row gx-4 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 justify-content-start mt-2">


    @if (list != null)
    {
        foreach (var item in list)
        {
            <div class="col mb-5">
                <div class="card h-100">
                    <div class="card-body p-4">
                        <div class="text-center">
                            <i class="oi oi-person" style="font-size:50px"></i>
                        </div>
                        <div class="text-start">
                            <p class="m-1"><b>Nom: </b>@item.NomComplet</p>
                            <p class="m-1"><b>Email: </b>@item.Email</p>
                        </div>
                    </div>
                    <div class="card-footer bg-transparent">
                        <div class="row justify-content-between">
                            <a class="col-5 btn btn-sm btn-outline-primary mt-auto" href="/utilisateur/@item.IdUtilisateur"><i class="oi oi-pencil fs-5"></i></a>
                            <button class="col-5 btn btn-sm btn-outline-danger mt-auto" type="button" @onclick="(async () => await Supprimer(item))">
                                <i class="oi oi-trash fs-5"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }

    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">chargement...</span>
        </div>
    }

</div>


@code {
    private List<UtilisateurDTO>? list = null;
    private string recherche = "";

    private async Task GetUtilisateur(string valeur = "")
    {
        var response = await utilisateurService.List("administrateur", valeur);
        if (response.EsCorrect)
        {
            list = (List<UtilisateurDTO>)response.Resultat!;
        }
        else
        {
            list = new List<UtilisateurDTO>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUtilisateur();
    }

    private async Task Supprimer(UtilisateurDTO model)
    {
        SweetAlertResult result = await swal.FireAsync(new SweetAlertOptions
        {
            Title = "Est vous vraiment sur de vouloir supprimer?",
            Text = $"Effacer: {model.NomComplet}?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Oui Effacer",
            CancelButtonText = "Non Ne pas supprimer"
        });

        if (result.IsConfirmed)
        {
            var response = await utilisateurService.Delete(model.IdUtilisateur);
            if (response.EsCorrect)
            {
                await GetUtilisateur();
                toastService.ShowSuccess("utilisateur effacer");
            }
            else
            {
                toastService.ShowSuccess(response.Message);
            }

        }
    }
}
