@page "/cart"

@inject IPanierService panierService
@inject IVenteService venteService
@inject IToastService toasteServcie
@inject NavigationManager navigationManager


<div class="row mt-4">

    @* INFORMATIONS SUR LES PRODUITS AJOUTÉS DANS LE PANIER*@
    <div class="col-sm-8">
        <div class="card mb-3">

            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm bg-light table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th style="width:102px"></th>
                                <th>Produit</th>
                                <th>Prix</th>
                                <th>Quantite</th>
                                <th>Total</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>

                            @if (list.Any())
                            {
                                foreach (var item in list)
                                {
                                    <tr>
                                        <td valign="middle">
                                            <img class="card-img-top" src="@item.produit.Image" style="width:100px">
                                        </td>
                                        <td valign="middle">@item.produit.Nom</td>
                                        <td valign="middle">@item.Prix</td>
                                        <td valign="middle" align="center">
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-outline-dark" @onclick="(() =>Diminution(item.produit.IdProduct))">
                                                    <i class="oi oi-minus"></i>
                                                    </button>
                                                <input class="form-control" readonly="readonly" style="width:50px" @bind-value="item.Quantite" />
                                                <button type="button" class="btn btn-outline-dark" @onclick="(() =>Augmenter(item.produit.IdProduct))">
                                                    <i class="oi oi-plus"></i>
                                                    </button>
                                            </div>
                                        </td>
                                        <td valign="middle">@item.Total</td>
                                        <td valign="middle">
                                            <button type="button" class="btn btn-outline-dark" @onclick="(async () => await Suppression(item.produit.IdProduct))">
                                                <i class="oi oi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }

                                
                            }else{
                                <tr>
                                    <td colspan="6">
                                        <div class="alert alert-warning" role="alert">
                                            Il n'y a aucun produit dans le panier
                                        </div>
                                    </td>
                                </tr>
                            }
                           

                        </tbody>
                    </table>
                </div>

                
            </div>

         
        </div>
    </div>

    @*   LES INFORMATIONS SUR LA CARTE ET L'OPTION DE PAIEMENT SONT AFFICHÉES*@
    <div class="col-sm-4">
        <div class="card mb-3">
            <div class="card-body">
                <EditForm Model="carteCredit" OnValidSubmit="ProcederPaiement">
                    <DataAnnotationsValidator></DataAnnotationsValidator>

                    <div class="mb-2">
                        <label class="form-label">Nom du propriétaire</label>
                        <input type="text" class="form-control form-control-sm" placeholder="" @bind-value="carteCredit.Proprietaire" disabled="@disabled">
                        <ValidationMessage For="@(()=>carteCredit.Proprietaire)" />
                        
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Numéro de carte</label>
                        <input type="text" class="form-control form-control-sm" placeholder="##############" autocomplete="off" @bind-value="carteCredit.Numero" disabled="@disabled">
                        <ValidationMessage For="@(()=>carteCredit.Numero)" />
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="mb-2">
                                <label class="form-label">Validité</label>
                                <input type="text" class="form-control form-control-sm" placeholder="MM/YY" autocomplete="off" @bind-value="carteCredit.Validite" disabled="@disabled">
                                <ValidationMessage For="@(()=>carteCredit.Validite)" />
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="mb-2">
                                <label class="form-label">CVV</label>
                                <input type="text" class="form-control form-control-sm" placeholder="###" autocomplete="off" @bind-value="carteCredit.CVV" disabled="@disabled">
                                <ValidationMessage For="@(()=>carteCredit.CVV)" />
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="d-flex justify-content-between">
                        <div>Total a payer:</div>
                        <div>S/. @(list.Sum(i => i.Total))</div>
                    </div>
                    <div class="mt-2">
                        <div class="d-grid gap-1">
                            <button class="btn btn-outline-secondary float-end" type="submit" disabled="@disabled">Traiter le paiement</button>
                        </div>
                    </div>
                </EditForm>

                @* COMMENTEZ TOUT CELA  *@              
                <AuthorizeView>
                    <NotAuthorized>
                        <div class="alert alert-danger mt-2" role="alert">
                            Vous devez vous connecter pour effectuer l'achat
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
                

            </div>
        </div>
    </div>
</div>

@code {
    private bool disabled = true;
    private List<PanierDTO> list = new();
    private decimal? Total = 0;
    private CarteCreditDTO carteCredit = new();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        list = await panierService.PanierList();
        var authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
            disabled = false;
    }

    private void Diminution(int id)
    {
        PanierDTO item = list.First(p => p.produit.IdProduct == id);

        if (item.Quantite > 1)
        {
            decimal? prixFinal = (item.produit.PrixOffre > 0 && item.produit.PrixOffre < item.produit.Prix) ? item.produit.PrixOffre : item.produit.Prix;

            item.Quantite--;
            item.Total = item.Quantite * prixFinal;
        }
    }

    private void Augmenter(int id)
    {
        PanierDTO item = list.First(p => p.produit.IdProduct == id);

        decimal? prixFinal = (item.produit.PrixOffre > 0 && item.produit.PrixOffre < item.produit.Prix) ? item.produit.PrixOffre : item.produit.Prix;

        item.Quantite++;
        item.Total = item.Quantite * prixFinal;
    }

    private async Task Suppression(int id)
    {
        PanierDTO produit = list.First(p => p.produit.IdProduct == id);

        if(produit !=null)
        {
            list.Remove(produit);
            await panierService.SupprimerProduitPanier(id);
        }
    }

    private async Task ProcederPaiement()
    {
        if (list.Count == 0)
        {
            toasteServcie.ShowWarning("auccun element dans le panier");
            return;
        }

        List<DetailVenteDTO> detailVentes = new List<DetailVenteDTO>();

        list.ForEach(panier => detailVentes.Add(new DetailVenteDTO()
        {
            IdProduit = panier.produit.IdProduct,
            Quantite = panier.Quantite,
            Total = panier.Total
        }));

        var authState = await authenticationState;
        var idUser = authState.User.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).Select(c => c.Value).Single();

        VenteDTO model = new VenteDTO()
        {
             IdUtilisateur = Convert.ToInt32(idUser),
             Total = list.Sum(v => v.Total),
             DetailVentes = detailVentes
        };

        var response = await venteService.Save(model);

        if (response.EsCorrect)
        {
            await panierService.EffacerPanier();
            toasteServcie.ShowSuccess("vente enregistrer");
            navigationManager.NavigateTo("/");
        }
        else
        {
            toasteServcie.ShowError(response.Message);
        }
    }

}
