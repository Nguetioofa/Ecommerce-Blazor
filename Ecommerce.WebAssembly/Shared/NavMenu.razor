@inject IPanierService panierService
@implements IDisposable 

@inject SweetAlertService Swal
@inject NavigationManager _nav
@inject AuthenticationStateProvider authenticationProvider

<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-light">
    <div class="container">
        <a class="navbar-brand" runat="server" href="#">Ecommerce Demo</a>
        <button type="button" class="navbar-toggler" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" title="Alternar navegación" aria-controls="navbarSupportedContent"
                aria-expanded="false" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="@NavMenuCssClass navbar-collapse d-sm-inline-flex justify-content-between">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4">

                <AuthorizeView Roles="administrateur">
                <li class="nav-item" b-test><NavLink class="nav-link" href="dashboard"> Dashboard</NavLink></li>
                <li class="nav-item"><NavLink class="nav-link" href="utilisateurs"> Utilisateurs</NavLink></li>
                <li class="nav-item"><NavLink class="nav-link" href="categories"> Categories</NavLink></li>
                <li class="nav-item"><NavLink class="nav-link" href="produits"> Produits</NavLink></li>
                </AuthorizeView>


                <li class="nav-item"><NavLink class="nav-link" href="catalogue"> Magazin</NavLink></li>
            </ul>

            <AuthorizeView>
                <Authorized>
                    <span class="navbar-text me-3">
                        @context.User.Claims.Where(c=>c.Type == ClaimTypes.Email).Select(c=>c.Value).FirstOrDefault()
                    </span>
                </Authorized>
            </AuthorizeView>

            <a class="btn btn-outline-dark ms-auto ms-md-0 me-3" href="/cart">
                <i class="bi-cart-fill me-1"></i>
                Cart
                <span class="badge bg-dark text-white ms-1 rounded-pill">@AfficherNombreElement()</span>
            </a>

            <AuthorizeView>
                <Authorized>
                    <button class="btn btn-outline-dark ms-auto ms-md-0 me-3" type="button" @onclick="Deconnexion">Se Deconnecter</button>
                </Authorized>
                <NotAuthorized>
                    <a class="btn btn-outline-dark ms-auto ms-md-0 me-3" href="/login">Se Connecter</a>
                </NotAuthorized>
            </AuthorizeView>

        </div>
    </div>
</nav>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        panierService.NombresElements += StateHasChanged;
    }

    public void Dispose()
    {
        panierService.NombresElements -= StateHasChanged;
    }

    private int AfficherNombreElement()
    {
        return panierService.QunatiteProduits();
    }

    private async Task Deconnexion()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Est vous vraiment sur de vouloir vous decconnecter?",
                Text = "Se deconnecter?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Oui",
                CancelButtonText = "Non"
            });

        if (result.IsConfirmed)
        {
            var authentificationExt = (AuthentificationExtension)authenticationProvider;
            await authentificationExt.ActualiserStatutAuthentification(null);
            _nav.NavigateTo("/", true);
        }
    }
}
